// Generated by CoffeeScript 1.6.3
(function() {
  var app, events, express, geolib, io, map, nearby, port, server, serverEmitter;

  geolib = require('geolib');

  express = require('express');

  app = express();

  server = require('http').createServer(app);

  io = require('socket.io').listen(server);

  events = require('events');

  serverEmitter = new events.EventEmitter();

  app.use(express.bodyParser());

  app.use(express["static"](__dirname + "/public"));

  port = process.env.PORT || 8000;

  server.listen(port);

  app.get('/', function(req, res) {
    return res.sendfile(__dirname + '/index.html');
  });

  app.get("/test", function(req, res) {
    return res.sendfile(__dirname + '/test.html');
  });

  app.post('/point', function(req, res) {
    var success, _ref;
    if ((((_ref = req.headers) != null ? _ref.origin : void 0) != null) && req.headers.origin.match(/http:\/\/\w+\.biblegateway\.com/)) {
      res.set('Access-Control-Allow-Origin', req.headers.origin);
      res.set('Access-Control-Allow-Methods', 'POST');
      res.set('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type');
    }
    if ((req.body.longitude != null) && (req.body.latitude != null)) {
      serverEmitter.emit('new point', req.body);
      success = true;
    } else {
      success = false;
    }
    return res.send({
      recieved: success
    });
  });

  nearby = io.of('/nearby').on('connection', function(socket) {
    return socket.on('set info', function(info) {
      return serverEmitter.on('new point', function(point) {
        var circleDistance, isPointInCircle, maxDistance;
        if (((info != null ? info.longitude : void 0) != null) && (info.latitude != null) && (point != null ? point.latitude : void 0) && (point.longitude != null)) {
          maxDistance = 1000;
          circleDistance = maxDistance;
          if (info.accuracy != null) {
            circleDistance += info.accuracy;
          }
          if (point.accuracy != null) {
            circleDistance += point.accuracy;
          }
          isPointInCircle = geolib.isPointInCircle({
            latitude: point.latitude,
            longitude: point.longitude
          }, {
            latitude: info.latitude,
            longitude: info.longitude
          }, circleDistance);
          if (isPointInCircle) {
            return socket.emit("nearby point", point);
          }
        }
      });
    });
  });

  map = io.of('/map').on('connection', function(socket) {
    return serverEmitter.on('new point', function(point) {
      return socket.emit("new point", point);
    });
  });

}).call(this);

/*
//@ sourceMappingURL=server.map
*/
